//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ValeraCinema
{
    using System;
    using System.Collections.Generic;
    using System.Text.RegularExpressions;

    public partial class Film
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        private string _description;
        private string _name;
        private int _year;
        private string _style;
        private string _country;
        private System.DateTime _dataSrart;
        private System.DateTime _dataEnd;
        private double _price;
        private double _rating;

        string pattern_year = @"^[0-9]{4}";
        string pattern_country = @"^[а-яА-ЯёЁ]+$";
        string pattern_style = @"^[а-яА-ЯёЁ]+$";
        string pattern_des = @"^[а-яА-ЯёЁ0-9]";

        public Film()
        {
            //this.Orders = new HashSet<Order>();
        }

        public int IdFilm { get; set; }
        public string Name { get { return _name; } set { if (IsLength(value, 3, 30)) { _name = value; } } }
        public int Year { get { return _year; } set { if (isYear(value.ToString()) && IsLength(value, 1888, DateTime.Now.Year)) { _year = value; } } }
        public string Style { get { return _style; } set { if (isStyle(value) && IsLength(value, 3, 20)) { _style = value; } } }
        public string Country { get { return _country; } set { if (isCountry(value) && IsLength(value, 3, 20)) { _country = value; } } }
        public double Rating { get { return _rating; } set { if (IsLength(value, 0, 10)) { _rating = value; } } }
        public double Price { get { return _price; } set { if (IsLength(value, 1, 20)) { _price = value; } } }
        public string Description { get { return _description; } set { if (isDescription(value) && IsLength(value, 5, 100)) { _description = value; } } }
        public System.DateTime StartRental { get; set; }
        public System.DateTime FinishRental { get; set; }

        public bool IsLength(string value, int min, int max)
        {
            return value.Length >= min && value.Length <= max;
        }

        public bool IsLength(int value, int min, int max)
        {
            return value >= min && value <= max;
        }

        public bool IsLength(double value, int min, int max)
        {
            return value >= min && value <= max;
        }

        public bool isYear(string value)
        {
            return Regex.IsMatch(value, pattern_year, RegexOptions.IgnoreCase);
        }
        public bool isCountry(string value)
        {
            return Regex.IsMatch(value, pattern_country, RegexOptions.IgnoreCase);
        }
        public bool isStyle(string value)
        {
            return Regex.IsMatch(value, pattern_style, RegexOptions.IgnoreCase);
        }
        public bool isDescription(string value)
        {
            return Regex.IsMatch(value, pattern_des, RegexOptions.IgnoreCase);
        }


        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Order> Orders { get; set; }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }
            else
            {

                Film f = obj as Film;
                if (Name.Equals(f.Name) && Year.Equals(f.Year) && Country.Equals(f.Country) && Style.Equals(f.Style))
                {
                    return true;
                }
                else
                {
                    return false;
                }


            }
        }

    }
}
